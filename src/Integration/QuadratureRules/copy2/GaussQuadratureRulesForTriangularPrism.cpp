//------------------------------------------------------------------------------
// File: GaussQuadratureRulesForTriangularPrism.cpp 
// Implementation of Gauss quadrature rules for reference triangular-prism.
// Lars Pesch, Fri Mar  3 12:59:11 CET 2006
//----
// Modified from original file allGaussQuadratureRules.hpp
// by M.T. Julianto, Wed Feb 23 10:45:06 UTC 2013
//---------------------------------------------------------------------------
// System includes and names imported from them:
#include <cmath>
//---------------------------------------------------------------------------
// Package includes:
#include "Integration/GlobalNamespaceIntegration.hpp"
#include "Integration/QuadratureRules/GaussQuadratureRulesForTriangularPrism.hpp"

//---------------------------------------------------------------------------
namespace QuadratureRules
{
//---------------------------------------------------------------------------
    std::string TriPrism_1_1::getName() const
        {
            return _name;
        }

    DimType  TriPrism_1_1::order() const
        {
            return 1;
        }

    DimType TriPrism_1_1::dimension() const
        {
            return 3;
        }

    DimType TriPrism_1_1::nrOfPoints() const
        {
            return 1;
        }

    NumType TriPrism_1_1::weight(DimType i) const
        {
            if (i < 1)
                return _weight[i];
            else
                throw _name + "::weight - wrong index!";
        }

    void TriPrism_1_1::getPoint(DimType i, PointReference<3>& p) const
        {
            if (i < 1)
                p=_gp[i];
            else
                throw _name + "::getPoint -  wrong index!";
        }

    Geometry::ReferenceGeometry<3>* TriPrism_1_1::forReferenceGeometry() const
        {
            return _refGeoPtr;
        }

    TriPrism_1_1::TriPrism_1_1()
     : _name("TriPrism_1_1"),
       _refGeoPtr(&ReferenceTriangularPrism::Instance())
            {
                _weight[0] = ( 0.5 ) * ( 2.0 );
                _gp[0][0] = 1.0 / 3.0;
                _gp[0][1] = 1.0 / 3.0;
                _gp[0][2] = 0.0;

                _refGeoPtr->addGaussQuadratureRule(this);
            }

    TriPrism_1_1::~TriPrism_1_1()
          {}

    namespace
    {
        const TriPrism_1_1& instantiateTriPrism_1_1 = TriPrism_1_1::Instance();
    }
//---------------------------------------------------------------------------
    std::string TriPrism_3_1::getName() const
        {
            return _name;
        }

    DimType  TriPrism_3_1::order() const
        {
            return 3;
        }

    DimType TriPrism_3_1::dimension() const
        {
            return 3;
        }

    DimType TriPrism_3_1::nrOfPoints() const
        {
            return 8;
        }

    NumType TriPrism_3_1::weight(DimType i) const
        {
            if (i < 8)
                return _weight[i];
            else
                throw _name + "::weight - wrong index!";
        }

    void TriPrism_3_1::getPoint(DimType i, PointReference<3>& p) const
        {
            if (i < 8)
                p=_gp[i];
            else
                throw _name + "::getPoint -  wrong index!";
        }

    Geometry::ReferenceGeometry<3>* TriPrism_3_1::forReferenceGeometry() const
        {
            return _refGeoPtr;
        }

    TriPrism_3_1::TriPrism_3_1()
     : _name("TriPrism_3_1"),
       _refGeoPtr(&ReferenceTriangularPrism::Instance())
            {
                _weight[0] = ( -9. / 32. ) * ( 1.0 );
                _gp[0][0] = 1. / 3.;
                _gp[0][1] = 1. / 3.;
                _gp[0][2] = -sqrt(3.0) / 3.0;

                _weight[1] = ( 25. / 96. ) * ( 1.0 );
                _gp[1][0] = 1. / 5.;
                _gp[1][1] = 1. / 5.;
                _gp[1][2] = -sqrt(3.0) / 3.0;

                _weight[2] = ( 25. / 96. ) * ( 1.0 );
                _gp[2][0] = 1. / 5.;
                _gp[2][1] = 3. / 5.;
                _gp[2][2] = -sqrt(3.0) / 3.0;

                _weight[3] = ( 25. / 96. ) * ( 1.0 );
                _gp[3][0] = 3. / 5.;
                _gp[3][1] = 1. / 5.;
                _gp[3][2] = -sqrt(3.0) / 3.0;

                _weight[4] = ( -9. / 32. ) * ( 1.0 );
                _gp[4][0] = 1. / 3.;
                _gp[4][1] = 1. / 3.;
                _gp[4][2] = +sqrt(3.0) / 3.0;

                _weight[5] = ( 25. / 96. ) * ( 1.0 );
                _gp[5][0] = 1. / 5.;
                _gp[5][1] = 1. / 5.;
                _gp[5][2] = +sqrt(3.0) / 3.0;

                _weight[6] = ( 25. / 96. ) * ( 1.0 );
                _gp[6][0] = 1. / 5.;
                _gp[6][1] = 3. / 5.;
                _gp[6][2] = +sqrt(3.0) / 3.0;

                _weight[7] = ( 25. / 96. ) * ( 1.0 );
                _gp[7][0] = 3. / 5.;
                _gp[7][1] = 1. / 5.;
                _gp[7][2] = +sqrt(3.0) / 3.0;

                _refGeoPtr->addGaussQuadratureRule(this);
            }

    TriPrism_3_1::~TriPrism_3_1()
          {}

    namespace
    {
        const TriPrism_3_1& instantiateTriPrism_3_1 = TriPrism_3_1::Instance();
    }
//---------------------------------------------------------------------------
    std::string TriPrism_5_1::getName() const
        {
            return _name;
        }

    DimType  TriPrism_5_1::order() const
        {
            return 5;
        }

    DimType TriPrism_5_1::dimension() const
        {
            return 3;
        }

    DimType TriPrism_5_1::nrOfPoints() const
        {
            return 21;
        }

    NumType TriPrism_5_1::weight(DimType i) const
        {
            if (i < 21)
                return _weight[i];
            else
                throw _name + "::weight - wrong index!";
        }

    void TriPrism_5_1::getPoint(DimType i, PointReference<3>& p) const
        {
            if (i < 21)
                p=_gp[i];
            else
                throw _name + "::getPoint -  wrong index!";
        }

    Geometry::ReferenceGeometry<3>* TriPrism_5_1::forReferenceGeometry() const
        {
            return _refGeoPtr;
        }

    TriPrism_5_1::TriPrism_5_1()
     : _name("TriPrism_5_1"),
       _refGeoPtr(&ReferenceTriangularPrism::Instance())
            {
                _weight[0] = ( 9. / 80. ) * ( 5. / 9. );
                _gp[0][0] = 1. / 3.;
                _gp[0][1] = 1. / 3.;
                _gp[0][2] = -sqrt(3.0 / 5.0);

                _weight[1] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[1][0] = (6. - sqrt(15.)) / 21.;
                _gp[1][1] = (6. - sqrt(15.)) / 21.;
                _gp[1][2] = -sqrt(3.0 / 5.0);

                _weight[2] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[2][0] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[2][1] = (6. - sqrt(15.)) / 21.;
                _gp[2][2] = -sqrt(3.0 / 5.0);

                _weight[3] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[3][0] = (6. - sqrt(15.)) / 21.;
                _gp[3][1] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[3][2] = -sqrt(3.0 / 5.0);

                _weight[4] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[4][0] = (6. + sqrt(15.)) / 21.;
                _gp[4][1] = (6. + sqrt(15.)) / 21.;
                _gp[4][2] = -sqrt(3.0 / 5.0);

                _weight[5] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[5][0] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[5][1] = (6. + sqrt(15.)) / 21.;
                _gp[5][2] = -sqrt(3.0 / 5.0);

                _weight[6] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[6][0] = (6. + sqrt(15.)) / 21.;
                _gp[6][1] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[6][2] = -sqrt(3.0 / 5.0);

                _weight[7] = ( 9. / 80. ) * ( 8. / 9. );
                _gp[7][0] = 1. / 3.;
                _gp[7][1] = 1. / 3.;
                _gp[7][2] = 0.0;

                _weight[8] = ( (155. - sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[8][0] = (6. - sqrt(15.)) / 21.;
                _gp[8][1] = (6. - sqrt(15.)) / 21.;
                _gp[8][2] = 0.0;

                _weight[9] = ( (155. - sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[9][0] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[9][1] = (6. - sqrt(15.)) / 21.;
                _gp[9][2] = 0.0;

                _weight[10] = ( (155. - sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[10][0] = (6. - sqrt(15.)) / 21.;
                _gp[10][1] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[10][2] = 0.0;

                _weight[11] = ( (155. + sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[11][0] = (6. + sqrt(15.)) / 21.;
                _gp[11][1] = (6. + sqrt(15.)) / 21.;
                _gp[11][2] = 0.0;

                _weight[12] = ( (155. + sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[12][0] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[12][1] = (6. + sqrt(15.)) / 21.;
                _gp[12][2] = 0.0;

                _weight[13] = ( (155. + sqrt(15.)) / 2400. ) * ( 8. / 9. );
                _gp[13][0] = (6. + sqrt(15.)) / 21.;
                _gp[13][1] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[13][2] = 0.0;

                _weight[14] = ( 9. / 80. ) * ( 5. / 9. );
                _gp[14][0] = 1. / 3.;
                _gp[14][1] = 1. / 3.;
                _gp[14][2] = +sqrt(3.0 / 5.0);

                _weight[15] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[15][0] = (6. - sqrt(15.)) / 21.;
                _gp[15][1] = (6. - sqrt(15.)) / 21.;
                _gp[15][2] = +sqrt(3.0 / 5.0);

                _weight[16] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[16][0] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[16][1] = (6. - sqrt(15.)) / 21.;
                _gp[16][2] = +sqrt(3.0 / 5.0);

                _weight[17] = ( (155. - sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[17][0] = (6. - sqrt(15.)) / 21.;
                _gp[17][1] = (9. + 2. * sqrt(15.)) / 21.;
                _gp[17][2] = +sqrt(3.0 / 5.0);

                _weight[18] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[18][0] = (6. + sqrt(15.)) / 21.;
                _gp[18][1] = (6. + sqrt(15.)) / 21.;
                _gp[18][2] = +sqrt(3.0 / 5.0);

                _weight[19] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[19][0] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[19][1] = (6. + sqrt(15.)) / 21.;
                _gp[19][2] = +sqrt(3.0 / 5.0);

                _weight[20] = ( (155. + sqrt(15.)) / 2400. ) * ( 5. / 9. );
                _gp[20][0] = (6. + sqrt(15.)) / 21.;
                _gp[20][1] = (9. - 2. * sqrt(15.)) / 21.;
                _gp[20][2] = +sqrt(3.0 / 5.0);

                _refGeoPtr->addGaussQuadratureRule(this);
            }

    TriPrism_5_1::~TriPrism_5_1()
          {}

    namespace
    {
        const TriPrism_5_1& instantiateTriPrism_5_1 = TriPrism_5_1::Instance();
    }
//---------------------------------------------------------------------------
    std::string TriPrism_7_1::getName() const
        {
            return _name;
        }

    DimType  TriPrism_7_1::order() const
        {
            return 7;
        }

    DimType TriPrism_7_1::dimension() const
        {
            return 3;
        }

    DimType TriPrism_7_1::nrOfPoints() const
        {
            return 64;
        }

    NumType TriPrism_7_1::weight(DimType i) const
        {
            if (i < 64)
                return _weight[i];
            else
                throw _name + "::weight - wrong index!";
        }

    void TriPrism_7_1::getPoint(DimType i, PointReference<3>& p) const
        {
            if (i < 64)
                p=_gp[i];
            else
                throw _name + "::getPoint -  wrong index!";
        }

    Geometry::ReferenceGeometry<3>* TriPrism_7_1::forReferenceGeometry() const
        {
            return _refGeoPtr;
        }

    TriPrism_7_1::TriPrism_7_1()
     : _name("TriPrism_7_1"),
       _refGeoPtr(&ReferenceTriangularPrism::Instance())
            {
                _weight[0] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[0][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[0][1] = 0.0571041961;
                _gp[0][2] = (-0.861136312);

                _weight[1] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[1][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[1][1] = 0.0571041961;
                _gp[1][2] = (-0.861136312);

                _weight[2] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[2][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[2][1] = 0.0571041961;
                _gp[2][2] = (-0.861136312);

                _weight[3] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[3][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[3][1] = 0.0571041961;
                _gp[3][2] = (-0.861136312);

                _weight[4] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[4][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[4][1] = 0.2768430136;
                _gp[4][2] = (-0.861136312);

                _weight[5] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[5][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[5][1] = 0.2768430136;
                _gp[5][2] = (-0.861136312);

                _weight[6] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[6][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[6][1] = 0.2768430136;
                _gp[6][2] = (-0.861136312);

                _weight[7] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[7][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[7][1] = 0.2768430136;
                _gp[7][2] = (-0.861136312);

                _weight[8] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[8][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[8][1] = 0.5835904324;
                _gp[8][2] = (-0.861136312);

                _weight[9] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[9][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[9][1] = 0.5835904324;
                _gp[9][2] = (-0.861136312);

                _weight[10] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[10][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[10][1] = 0.5835904324;
                _gp[10][2] = (-0.861136312);

                _weight[11] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[11][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[11][1] = 0.5835904324;
                _gp[11][2] = (-0.861136312);

                _weight[12] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[12][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[12][1] = 0.8602401357;
                _gp[12][2] = (-0.861136312);

                _weight[13] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[13][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[13][1] = 0.8602401357;
                _gp[13][2] = (-0.861136312);

                _weight[14] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[14][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[14][1] = 0.8602401357;
                _gp[14][2] = (-0.861136312);

                _weight[15] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[15][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[15][1] = 0.8602401357;
                _gp[15][2] = (-0.861136312);

                _weight[16] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[16][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[16][1] = 0.0571041961;
                _gp[16][2] = (-0.3399810436);

                _weight[17] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[17][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[17][1] = 0.0571041961;
                _gp[17][2] = (-0.3399810436);

                _weight[18] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[18][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[18][1] = 0.0571041961;
                _gp[18][2] = (-0.3399810436);

                _weight[19] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[19][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[19][1] = 0.0571041961;
                _gp[19][2] = (-0.3399810436);

                _weight[20] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[20][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[20][1] = 0.2768430136;
                _gp[20][2] = (-0.3399810436);

                _weight[21] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[21][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[21][1] = 0.2768430136;
                _gp[21][2] = (-0.3399810436);

                _weight[22] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[22][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[22][1] = 0.2768430136;
                _gp[22][2] = (-0.3399810436);

                _weight[23] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[23][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[23][1] = 0.2768430136;
                _gp[23][2] = (-0.3399810436);

                _weight[24] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[24][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[24][1] = 0.5835904324;
                _gp[24][2] = (-0.3399810436);

                _weight[25] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[25][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[25][1] = 0.5835904324;
                _gp[25][2] = (-0.3399810436);

                _weight[26] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[26][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[26][1] = 0.5835904324;
                _gp[26][2] = (-0.3399810436);

                _weight[27] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[27][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[27][1] = 0.5835904324;
                _gp[27][2] = (-0.3399810436);

                _weight[28] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[28][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[28][1] = 0.8602401357;
                _gp[28][2] = (-0.3399810436);

                _weight[29] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[29][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[29][1] = 0.8602401357;
                _gp[29][2] = (-0.3399810436);

                _weight[30] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[30][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[30][1] = 0.8602401357;
                _gp[30][2] = (-0.3399810436);

                _weight[31] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[31][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[31][1] = 0.8602401357;
                _gp[31][2] = (-0.3399810436);

                _weight[32] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[32][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[32][1] = 0.0571041961;
                _gp[32][2] = (+0.3399810436);

                _weight[33] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[33][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[33][1] = 0.0571041961;
                _gp[33][2] = (+0.3399810436);

                _weight[34] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[34][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[34][1] = 0.0571041961;
                _gp[34][2] = (+0.3399810436);

                _weight[35] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.3260725774) );
                _gp[35][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[35][1] = 0.0571041961;
                _gp[35][2] = (+0.3399810436);

                _weight[36] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[36][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[36][1] = 0.2768430136;
                _gp[36][2] = (+0.3399810436);

                _weight[37] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[37][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[37][1] = 0.2768430136;
                _gp[37][2] = (+0.3399810436);

                _weight[38] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[38][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[38][1] = 0.2768430136;
                _gp[38][2] = (+0.3399810436);

                _weight[39] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.3260725774) );
                _gp[39][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[39][1] = 0.2768430136;
                _gp[39][2] = (+0.3399810436);

                _weight[40] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[40][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[40][1] = 0.5835904324;
                _gp[40][2] = (+0.3399810436);

                _weight[41] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[41][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[41][1] = 0.5835904324;
                _gp[41][2] = (+0.3399810436);

                _weight[42] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[42][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[42][1] = 0.5835904324;
                _gp[42][2] = (+0.3399810436);

                _weight[43] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.3260725774) );
                _gp[43][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[43][1] = 0.5835904324;
                _gp[43][2] = (+0.3399810436);

                _weight[44] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[44][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[44][1] = 0.8602401357;
                _gp[44][2] = (+0.3399810436);

                _weight[45] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[45][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[45][1] = 0.8602401357;
                _gp[45][2] = (+0.3399810436);

                _weight[46] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[46][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[46][1] = 0.8602401357;
                _gp[46][2] = (+0.3399810436);

                _weight[47] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.3260725774) );
                _gp[47][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[47][1] = 0.8602401357;
                _gp[47][2] = (+0.3399810436);

                _weight[48] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[48][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[48][1] = 0.0571041961;
                _gp[48][2] = (+0.861136312);

                _weight[49] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[49][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[49][1] = 0.0571041961;
                _gp[49][2] = (+0.861136312);

                _weight[50] = ( (0.3260725774) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[50][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.0571041961));
                _gp[50][1] = 0.0571041961;
                _gp[50][2] = (+0.861136312);

                _weight[51] = ( (0.1739274226) * (0.1355069134) ) * ( (2. * 0.1739274226) );
                _gp[51][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.0571041961));
                _gp[51][1] = 0.0571041961;
                _gp[51][2] = (+0.861136312);

                _weight[52] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[52][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[52][1] = 0.2768430136;
                _gp[52][2] = (+0.861136312);

                _weight[53] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[53][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[53][1] = 0.2768430136;
                _gp[53][2] = (+0.861136312);

                _weight[54] = ( (0.3260725774) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[54][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.2768430136));
                _gp[54][1] = 0.2768430136;
                _gp[54][2] = (+0.861136312);

                _weight[55] = ( (0.1739274226) * (0.2034645680) ) * ( (2. * 0.1739274226) );
                _gp[55][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.2768430136));
                _gp[55][1] = 0.2768430136;
                _gp[55][2] = (+0.861136312);

                _weight[56] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[56][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[56][1] = 0.5835904324;
                _gp[56][2] = (+0.861136312);

                _weight[57] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[57][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[57][1] = 0.5835904324;
                _gp[57][2] = (+0.861136312);

                _weight[58] = ( (0.3260725774) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[58][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.5835904324));
                _gp[58][1] = 0.5835904324;
                _gp[58][2] = (+0.861136312);

                _weight[59] = ( (0.1739274226) * (0.1298475476) ) * ( (2. * 0.1739274226) );
                _gp[59][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.5835904324));
                _gp[59][1] = 0.5835904324;
                _gp[59][2] = (+0.861136312);

                _weight[60] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[60][0] = ((-0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[60][1] = 0.8602401357;
                _gp[60][2] = (+0.861136312);

                _weight[61] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[61][0] = ((-0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[61][1] = 0.8602401357;
                _gp[61][2] = (+0.861136312);

                _weight[62] = ( (0.3260725774) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[62][0] = ((+0.3399810436 + 1.)/ 2.) * (1. - (0.8602401357));
                _gp[62][1] = 0.8602401357;
                _gp[62][2] = (+0.861136312);

                _weight[63] = ( (0.1739274226) * (0.0311809709) ) * ( (2. * 0.1739274226) );
                _gp[63][0] = ((+0.861136312 + 1.) / 2.) * (1. - (0.8602401357));
                _gp[63][1] = 0.8602401357;
                _gp[63][2] = (+0.861136312);

                _refGeoPtr->addGaussQuadratureRule(this);
            }

    TriPrism_7_1::~TriPrism_7_1()
          {}

    namespace
    {
        const TriPrism_7_1& instantiateTriPrism_7_1 = TriPrism_7_1::Instance();
    }
//---------------------------------------------------------------------------
} // close namespace IntegrationRules
